//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Isris.BinaryBlocks.CsharpGenerator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Isris.BinaryBlocks.CsharpGenerator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * Copyright (c) 2013 Jeremy Wyman
        /// * Microsoft Public License (Ms-PL)
        /// * This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.
        /// * 1. Definitions
        /// *    The terms &quot;reproduce&quot;, &quot;reproduction&quot;, &quot;derivative works&quot;, and &quot;distribution&quot; have the same meaning here as under U.S. copyright law.
        /// *    A &quot;contribution&quot; is the original software, or any additions or changes to the software.
        /// *    A &quot;co [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BinaryBlocks {
            get {
                return ResourceManager.GetString("BinaryBlocks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bbcsgen -files &lt;file [file]&gt; -output &lt;output_dir&gt; [-namespace &lt;root_namespace&gt;]
        ///
        ///Options:
        ///	-files = -f, -file, --file, --files, /f, /file, /files
        ///		Space delimited list of one or more binary block definition files. 
        ///		Note: enclosing paths in quotes is recommended.
        ///	-output = -o, -out, --out, --output, /o, /out, /output
        ///		Target directory where all generated files are expected to go.
        ///	-namespace = -n, -name, -ns, --name, --namespace, --root, /n, /ns, /name, /namespace
        ///		Optional. The root namespace [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Command {
            get {
                return ResourceManager.GetString("Command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binary Blocks (Copyright (c) 2013 Jeremy Wyman) and all derivative works are licensed under the Microsoft Reference Source License (Ms-PL).
        ///	
        ///Microsoft Public License (Ms-PL)
        ///This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.
        ///1. Definitions
        ///	The terms &quot;reproduce&quot;, &quot;reproduction&quot;, &quot;derivative works&quot;, and &quot;distribution&quot; have the same meaning here as under U.S. copyright law.
        ///	A &quot;contribution&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string License {
            get {
                return ResourceManager.GetString("License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binary Blocks
        ///
        ///A system for serializing data to a persistant storage which is both backwards and forewards compatible. Using a form of markup, transient data can be persisted and retrived reliably.
        ///
        ///Supported Fields
        ///
        ///* type
        ///	A simple instance of a native type or a struct.
        ///* struct
        ///	A complex organization of types, structs, and lists. The &quot;root&quot; value of any binary block definition is a struct.
        ///* list
        ///	A single dimension series of one kind of type or struct.
        ///* enum
        ///	An enumerated list of values. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Specification {
            get {
                return ResourceManager.GetString("Specification", resourceCulture);
            }
        }
    }
}
