Binary Blocks
Copyright (c) 2013 Jeremy Wyman, released under the Microsoft Public License (Ms-PL)

A system for serializing data to a persistant storage which is both backwards and forewards compatible. Using a form of markup, transient data can be persisted and retrived reliably.

Supported Fields
* type
	A simple instance of a native type or a struct.
* struct
	A complex organization of types, structs, and lists. The "root" value of any binary block definition is a struct.
* list
	A single dimension series of one kind of type or struct.
* enum
	An enumerated list of values.

Native Types
* byte
	8 bit unsigned integer value. Supports a default value.
* char
	UTF-8 encoded character value. Supports a default value.
* sint
	32 bit signed integrer value. Supports a default value.
* uint
	32 bit unsigned integer value. Supports a default value.
* slong
	64 bit signed integer value. Supports a default value.
* ulong
	64 bit unsigned integer value. Supports a default value.
* single
	32 bit floating point value. Supports a default value.
* double
	64 bit floating point value. Supports a default value.
* string
	UTF-8 encoded array of character values. Supports a default value.
* timestamp
	64 bit signed integer which represents the number of milliseconds before or after 0.1.1 00:00:00.0000Z. Supports a default value. Effective range is roughly 600 million years ranging from 292,271,023 BC to 292,271,023 CE.
* timespan
	64 bit unsigned integer which represents a number of elapsed picoseconds. Effective range is roughly 584,542 years.
* blob
	efficient storage of an array of bytes up to 2GB (2^31 bytes) in size.
* guid
	16 byte blob value. Supports a default value.

Tag Structure
 {
	byte0 = Type Identifier
	byte1 = MemberOrdinal
	byte2 = reserved
	byte3 = reserved
 }

!! NOTE: namespace, struct, and type names can only contain letters, numbers, and underscores and cannot begin with a number. !!

Declarations
*	Namespace declariations scope all struct definitions with in a given definition file. Only a single namespace can be defined per definition file; more than one definition file can share a single namespace.

	NOTE: A definition file without a namespace declaration will assume the empty namespace.

*	Struct declcarations are in the format of the "struct" keyword followed by the name of the struct, followed by the definition of the struct bookended in a pair of braces "{ }".

	Example:

	struct <struct name>
	{
		<definition>
	}

	Structs should contain a number of members, each suffixed with a ordinal. The ordinal is the unqiue identifier for the member within this struct definition. 
	Generally ordinals begin with 1, but can be any integer [1, 255]. This limits the number of members a struct can contain to 255.

	NOTE: A struct without any member types will be ignored by the compiler.

*	Enum delcarations are in the format of the "enum" keyword followed by the name of the enumeration and a bracketed list of the enumeration's values. Enumeration values are comma seperated and must be assigned literal values as needed.
	Enumerations use a 32 bit signed storage type which allows for literal values ranging from -2147483648 to 2147483647.
	
	Example:

	enum <enumeration name>
	{
		<value name> = <literal value>,
	}

*	Type declarations are in the format of the "type" or "list" keyword followed by either a native type or the name of a customed defined struct, followed by the the name of the member. 
	Each member must be suffixed with an unique ordinal. Each member definition
	must be terminated with a semi-colon.

	Example:

	<type or list keyword> <native, struct, or enum name> <member name> = <ordinal>;

Microsoft Public License (Ms-PL)
This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.
1. Definitions
	The terms "reproduce", "reproduction", "derivative works", and "distribution" have the same meaning here as under U.S. copyright law.
	A "contribution" is the original software, or any additions or changes to the software.
	A "contributor" is any person that distributes its contribution under this license.
	"Licensed patents" are a contributor's patent claims that read directly on its contribution.
2. Grant of Rights
	(A) Copyright Grant - Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.
	(B) Patent Grant - Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.
3. Conditions and Limitations
	(A) No Trademark License - This license does not grant you rights to use any contributors' name, logo, or trademarks.
	(B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.
	(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.
	(D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.
	(E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.
	   
More info on: http://binaryblocks.codeplex.com
	